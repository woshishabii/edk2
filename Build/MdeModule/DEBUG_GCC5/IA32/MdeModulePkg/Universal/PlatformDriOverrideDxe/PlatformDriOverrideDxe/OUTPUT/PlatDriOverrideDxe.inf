## @file
#  This driver produces UEFI PLATFORM_DRIVER_OVERRIDE_PROTOCOL if this protocol doesn't exist.
#  It doesn't install again if this protocol exists.
#  It only implements one interface GetDriver of PLATFORM_DRIVER_OVERRIDE_PROTOCOL protocol
#  and doesn't support other two interfaces GetDriverPath, DriverLoaded.
#
#  This driver also offers an UI interface in device manager to let user configure
#  platform override protocol to override the default algorithm for matching
#  drivers to controllers.
#
#  The main flow:
#  1. It dynamicly locate all controller device path.
#  2. It dynamicly locate all drivers which support binding protocol.
#  3. It export and dynamicly update two menu to let user select the
#     mapping between drivers to controllers.
#  4. It save all the mapping info in NV variables for the following boot,
#     which will be consumed by GetDriver API of the produced the platform override protocol.
#
# Caution: This module is a sample implementation for the test purpose.
#
# Copyright (c) 2007 - 2018, Intel Corporation. All rights reserved.<BR>
#
#  SPDX-License-Identifier: BSD-2-Clause-Patent
#
##

# DO NOT EDIT
# FILE auto-generated

[Defines]
  INF_VERSION                = 0x00010017
  BASE_NAME                  = PlatDriOverrideDxe
  FILE_GUID                  = 35034CE2-A6E5-4fb4-BABE-A0156E9B2549
  MODULE_TYPE                = DXE_DRIVER
  VERSION_STRING             = 1.0
  ENTRY_POINT                = PlatDriOverrideDxeInit
  UNLOAD_IMAGE               = PlatDriOverrideDxeUnload
  MODULE_UNI_FILE            = PlatDriOverrideDxe.uni

[Packages.IA32]
  MdePkg/MdePkg.dec
  MdeModulePkg/MdeModulePkg.dec

[Binaries.IA32]
  PE32|PlatDriOverrideDxe.efi
  DXE_DEPEX|PlatDriOverrideDxe.depex

[PatchPcd.IA32]

[Protocols.IA32]
  ## SOMETIMES_PRODUCES # User chooses to produce it
  ## SOMETIMES_CONSUMES # Get Driver Name if ComponentName2Protocol exists
  gEfiComponentName2ProtocolGuid

  ## SOMETIMES_PRODUCES # User chooses to produce it
  ## SOMETIMES_CONSUMES # Get Driver Name if ComponentNameProtocol exists and ComponentName2Protocol doesn't exist
  gEfiComponentNameProtocolGuid

  ## SOMETIMES_CONSUMES # Get Driver Name from EFI UI section if ComponentName2Protocol and ComponentNameProtocol don't exist
  gEfiFirmwareVolume2ProtocolGuid

  ## SOMETIMES_CONSUMES # Find the PCI device if PciIo protocol is installed
  gEfiPciIoProtocolGuid

  ## SOMETIMES_CONSUMES # Check whether the PCI device contains one or more efi drivers in its option rom by this protocol
  gEfiBusSpecificDriverOverrideProtocolGuid

  ## SOMETIMES_PRODUCES
  ## SOMETIMES_CONSUMES
  gEfiDriverBindingProtocolGuid

  ## SOMETIMES_CONSUMES
  ## SOMETIMES_CONSUMES
  gEfiLoadedImageProtocolGuid

  ## SOMETIMES_CONSUMES # Show the drivers in the second page that support DriverBindingProtocol, LoadedImageProtocol and LoadedImageDevicePathProtocol
  gEfiLoadedImageDevicePathProtocolGuid

  ## SOMETIMES_CONSUMES
  ## CONSUMES
  gEfiFormBrowser2ProtocolGuid

  ## CONSUMES
  ## CONSUMES
  gEfiHiiConfigRoutingProtocolGuid

  ## PRODUCES
  gEfiHiiConfigAccessProtocolGuid

  ## PRODUCES
  gEfiPlatformDriverOverrideProtocolGuid

  ## SOMETIMES_CONSUMES
  ## SOMETIMES_CONSUMES
  ## PRODUCES
  ## SOMETIMES_CONSUMES # Show the controller device in the first page that support DevicePathProtocol
  gEfiDevicePathProtocolGuid

  ## UNDEFINED
  gEfiDebugPortProtocolGuid

  ## SOMETIMES_CONSUMES
  ## SOMETIMES_CONSUMES
  gEfiHiiFontProtocolGuid

  ## CONSUMES
  gEfiHiiStringProtocolGuid

  ## SOMETIMES_CONSUMES
  gEfiHiiImageProtocolGuid

  ## CONSUMES
  gEfiHiiDatabaseProtocolGuid

  ## SOMETIMES_CONSUMES
  gEfiSimpleTextOutProtocolGuid

  ## SOMETIMES_CONSUMES
  gEfiGraphicsOutputProtocolGuid

  ## SOMETIMES_CONSUMES
  gEfiSimpleFileSystemProtocolGuid

  ## SOMETIMES_CONSUMES # Consumes if gEfiGraphicsOutputProtocolGuid uninstalled
  gEfiUgaDrawProtocolGuid

  ## SOMETIMES_PRODUCES # User chooses to produce it
  gEfiDriverConfigurationProtocolGuid

  ## SOMETIMES_PRODUCES # User chooses to produce it
  gEfiDriverConfiguration2ProtocolGuid

  ## SOMETIMES_PRODUCES # User chooses to produce it
  gEfiDriverDiagnosticsProtocolGuid

  ## SOMETIMES_PRODUCES # User chooses to produce it
  gEfiDriverDiagnostics2ProtocolGuid


[Ppis.IA32]

[Guids.IA32]
  #
  # This GUID C Name is not required for build since it is from UefiLib and not directly used by this module source.
  #  gEfiGlobalVariableGuid                     ## SOMETIMES_CONSUMES   ## Variable:L"PlatformLang" # this variable specifies the platform supported language string (RFC 4646 format)
  #  gEfiGlobalVariableGuid                     ## SOMETIMES_CONSUMES   ## Variable:L"Lang" # this variable specifies the platform supported language string (ISO 639-2 format)
  #
  # There could be more than one variables, from PlatDriOver, PlatDriOver1, PlatDriOver2,...
  #  gEfiCallerIdGuid                           ## Private  ## Variable:L"PlatDriOver"
  #
  ## SOMETIMES_PRODUCES   ## UNDEFINED
  gEfiIfrTianoGuid

  ## SOMETIMES_CONSUMES ## GUID # HiiIsConfigHdrMatch Data
  ## SOMETIMES_PRODUCES ## GUID # HiiGetBrowserData Data
  ## SOMETIMES_CONSUMES ## GUID # HiiSetBrowserData Data
  ## SOMETIMES_PRODUCES ## GUID # HiiConstructConfigHdr Data
  ## CONSUMES           ## HII
  gPlatformOverridesManagerGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiVTUTF8Guid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiVT100Guid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiVT100PlusGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiPcAnsiGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiUartDevicePathGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiSasDevicePathGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiVirtualDiskGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiVirtualCdGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiPersistentVirtualDiskGuid

  ## SOMETIMES_CONSUMES  ## GUID
  gEfiPersistentVirtualCdGuid

  ## SOMETIMES_CONSUMES  ## Event
  gEfiEventReadyToBootGuid

  ## SOMETIMES_CONSUMES  ## Event
  gEfiEventLegacyBootGuid

  ## SOMETIMES_CONSUMES  ## Variable
  gEfiGlobalVariableGuid

  ## SOMETIMES_CONSUMES  ## SystemTable
  gEfiAcpi20TableGuid

  ## SOMETIMES_CONSUMES  ## SystemTable
  gEfiAcpi10TableGuid

  ## SOMETIMES_CONSUMES ## GUID
  gEdkiiIfrBitVarstoreGuid

  ## CONSUMES  ## SystemTable
  gEfiDxeServicesTableGuid


[PcdEx.IA32]

[LibraryClasses.IA32]
## @LIB_INSTANCES
#  MdePkg/Library/BasePcdLibNull/BasePcdLibNull.inf
#  MdePkg/Library/BaseMemoryLib/BaseMemoryLib.inf
#  MdePkg/Library/BaseDebugLibNull/BaseDebugLibNull.inf
#  MdePkg/Library/BaseLib/BaseLib.inf
#  MdePkg/Library/UefiBootServicesTableLib/UefiBootServicesTableLib.inf
#  MdePkg/Library/BasePrintLib/BasePrintLib.inf
#  MdePkg/Library/UefiMemoryAllocationLib/UefiMemoryAllocationLib.inf
#  MdePkg/Library/UefiRuntimeServicesTableLib/UefiRuntimeServicesTableLib.inf
#  MdePkg/Library/UefiDevicePathLib/UefiDevicePathLib.inf
#  MdeModulePkg/Library/UefiHiiServicesLib/UefiHiiServicesLib.inf
#  MdePkg/Library/UefiLib/UefiLib.inf
#  MdePkg/Library/UefiDriverEntryPoint/UefiDriverEntryPoint.inf
#  MdeModulePkg/Library/UefiHiiLib/UefiHiiLib.inf
#  MdePkg/Library/DxeServicesTableLib/DxeServicesTableLib.inf

[Depex.IA32]
#  (gEfiFormBrowser2ProtocolGuid AND gEfiHiiConfigRoutingProtocolGuid) AND (gEfiHiiStringProtocolGuid        AND gEfiHiiDatabaseProtocolGuid      AND gEfiHiiConfigRoutingProtocolGuid) AND (gEfiHiiStringProtocolGuid        AND gEfiHiiDatabaseProtocolGuid      AND gEfiHiiConfigRoutingProtocolGuid) AND (gEfiHiiStringProtocolGuid        AND gEfiHiiDatabaseProtocolGuid      AND gEfiHiiConfigRoutingProtocolGuid) AND (gEfiHiiStringProtocolGuid        AND gEfiHiiDatabaseProtocolGuid      AND gEfiHiiConfigRoutingProtocolGuid) AND (gEfiBdsArchProtocolGuid AND gEfiCpuArchProtocolGuid AND gEfiMetronomeArchProtocolGuid AND gEfiMonotonicCounterArchProtocolGuid AND gEfiRealTimeClockArchProtocolGuid AND gEfiResetArchProtocolGuid AND gEfiRuntimeArchProtocolGuid AND gEfiSecurityArchProtocolGuid AND gEfiTimerArchProtocolGuid AND gEfiVariableWriteArchProtocolGuid AND gEfiVariableArchProtocolGuid AND gEfiWatchdogTimerArchProtocolGuid)

[UserExtensions.TianoCore."ExtraFiles"]
PlatDriOverrideDxeExtra.uni



#
# The following information is for reference only and not required by the build tools.
#
#  VALID_ARCHITECTURES           = IA32 X64 EBC
#

[BuildOptions.IA32]
## @AsBuilt
##   GCC:DEBUG_GCC5_IA32_ASLPP_FLAGS = -x c -E -include AutoGen.h
##   GCC:DEBUG_GCC5_IA32_ASLDLINK_FLAGS = -nostdlib -Wl,-n,-q,--gc-sections -z common-page-size=0x40 -Wl,--defsym=PECOFF_HEADER_SIZE=0 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds -Wl,--entry,ReferenceAcpiTable -u ReferenceAcpiTable -Wl,-m,elf_i386 -no-pie
##   GCC:DEBUG_GCC5_IA32_GENFW_FLAGS = 
##   GCC:DEBUG_GCC5_IA32_OBJCOPY_FLAGS = 
##   GCC:DEBUG_GCC5_IA32_DEPS_FLAGS = -MMD -MF $@.deps
##   GCC:DEBUG_GCC5_IA32_ASM_FLAGS = -c -x assembler -imacros AutoGen.h -m32 -march=i386
##   GCC:DEBUG_GCC5_IA32_CC_FLAGS = -g -Os -fshort-wchar -fno-builtin -fno-strict-aliasing -Wall -Werror -Wno-array-bounds -include AutoGen.h -fno-common -ffunction-sections -fdata-sections -DSTRING_ARRAY_NAME=$(BASE_NAME)Strings -m32 -march=i586 -malign-double -fno-stack-protector -D EFI32 -fno-asynchronous-unwind-tables -Wno-address -fno-pic -fno-pie -flto -Os
##   GCC:DEBUG_GCC5_IA32_ASMLINK_FLAGS = /nologo /tiny
##   GCC:DEBUG_GCC5_IA32_VFR_FLAGS = -l -n
##   GCC:DEBUG_GCC5_IA32_ASLCC_FLAGS = -x c -fno-lto -m32
##   GCC:DEBUG_GCC5_IA32_APP_FLAGS = 
##   GCC:DEBUG_GCC5_IA32_NASM_FLAGS = -f elf32
##   GCC:DEBUG_GCC5_IA32_OPTROM_FLAGS = -e
##   GCC:DEBUG_GCC5_IA32_DTC_FLAGS = -H epapr
##   GCC:DEBUG_GCC5_IA32_SYMRENAME_FLAGS = Symbol renaming not needed for
##   GCC:DEBUG_GCC5_IA32_RC_FLAGS = -I binary -O elf32-i386          -B i386    --rename-section .data=.hii
##   GCC:DEBUG_GCC5_IA32_PP_FLAGS = -E -x assembler-with-cpp -include AutoGen.h -DOPENSBI_EXTERNAL_SBI_TYPES=OpensbiTypes.h
##   GCC:DEBUG_GCC5_IA32_VFRPP_FLAGS = -x c -E -P -DVFRCOMPILE --include $(MODULE_NAME)StrDefs.h
##   GCC:DEBUG_GCC5_IA32_DLINK_FLAGS = -nostdlib -Wl,-n,-q,--gc-sections -z common-page-size=0x40 -Wl,--entry,$(IMAGE_ENTRY_POINT) -u $(IMAGE_ENTRY_POINT) -Wl,-Map,$(DEST_DIR_DEBUG)/$(BASE_NAME).map,--whole-archive -flto -Os -Wl,-m,elf_i386,--oformat=elf32-i386
##   GCC:DEBUG_GCC5_IA32_ASL_FLAGS = 
##   GCC:DEBUG_GCC5_IA32_NASMB_FLAGS = -f bin
##   GCC:DEBUG_GCC5_IA32_DLINK2_FLAGS = -Wl,--defsym=PECOFF_HEADER_SIZE=0x220 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds -Wno-error -no-pie
